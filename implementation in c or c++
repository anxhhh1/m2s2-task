#include <iostream>
#include <pthread.h>
#include <vector>
#include <algorithm>
#include <numeric>

#define NUM_THREADS 4

pthread_mutex_t mutx;

std::vector<int> data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
long global_sum = 0;

void *sum(void *threadid)
{
   long tid;
   long sum = 0;
   tid = (long)threadid;

   int range = data.size() / NUM_THREADS;
   int start = tid * range ;
   int end = start + range ;

   for(int i = start ; i < end ; i++) {
        sum += data[i];
   }

   //enforce sequential update
   pthread_mutex_lock(&mutx);
   global_sum += sum;
   pthread_mutex_unlock(&mutx);
   //enforce sequential update

   pthread_exit(NULL);
}

int main(int argc, char *argv[])
{
    pthread_mutex_init(&mutx, NULL);

    pthread_t threads[NUM_THREADS];
    long tid = 0;

    for(tid = 0; tid < NUM_THREADS; tid++) {
        pthread_create(&threads[tid], NULL, sum, (void *)tid);
    }

    for(tid = 0; tid < NUM_THREADS; tid++) {
        pthread_join(threads[tid], NULL);
    }

    std::cout << "the final sum = " << global_sum << std::endl;
}
